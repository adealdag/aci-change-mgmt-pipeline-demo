# ACI playbook - Create Development App Demo

- name: Create Development App Demo
  hosts: apic
  connection: local
  gather_facts: no

  vars:
    aci_login: &aci_login
      host: "{{ ansible_host }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password | default(omit) }}"
      private_key: "{{ aci_private_key | default(omit) }}"
      certificate_name: "{{ aci_certificate_name | default(omit) }}"
      validate_certs: "{{ aci_validate_certs }}"
      annotation: "orchestrator:ansible"

  tasks:
    - name: Add App Demo Application Profile
      cisco.aci.aci_ap:
        <<: *aci_login
        tenant: development_tn
        ap: app_demo_ap
        state: present
        output_path: dryrun_data.json

    - name: Add app_demo/web EPG
      cisco.aci.aci_epg:
        <<: *aci_login
        tenant: development_tn
        ap: app_demo_ap
        epg: web_epg
        bd: 192.168.200.0_24_bd
        preferred_group: no
        state: present
        output_path: dryrun_data.json

    - name: Add app_demo/app EPG
      cisco.aci.aci_epg:
        <<: *aci_login
        tenant: development_tn
        ap: app_demo_ap
        epg: app_epg
        bd: 192.168.200.0_24_bd
        preferred_group: no
        state: present
        output_path: dryrun_data.json

    - name: Add app_demo/db EPG
      cisco.aci.aci_epg:
        <<: *aci_login
        tenant: development_tn
        ap: app_demo_ap
        epg: db_epg
        bd: 192.168.201.0_24_bd
        preferred_group: no
        state: present
        output_path: dryrun_data.json

    # Contracts

    - name: Add contract for web_to_app
      cisco.aci.aci_contract:
        <<: *aci_login
        tenant: development_tn
        contract: web_to_app_con
        description: Communication between web servers and application backend
        scope: application-profile
        state: present
        output_path: dryrun_data.json

    - name: Add contract subject for web_to_app
      cisco.aci.aci_contract_subject:
        <<: *aci_login
        tenant: development_tn
        contract: web_to_app_con
        subject: http_https
        reverse_filter: yes
        state: present
        output_path: dryrun_data.json

    - name: Bind filters to contract subject for web_to_app
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_login
        tenant: development_tn
        contract: web_to_app_con
        subject: http_https
        filter: "{{ item }}"
        log: log
        state: present
        output_path: dryrun_data.json
      loop:
        - http
        - https

    - name: Add contract for app_to_db
      cisco.aci.aci_contract:
        <<: *aci_login
        tenant: development_tn
        contract: app_to_db_con
        description: Communication between application backend and databases
        scope: application-profile
        state: present
        output_path: dryrun_data.json

    - name: Add contract subject for app_to_db
      cisco.aci.aci_contract_subject:
        <<: *aci_login
        tenant: development_tn
        contract: app_to_db_con
        subject: mongodb
        reverse_filter: yes
        state: present
        output_path: dryrun_data.json

    - name: Bind filters to contract subject for app_to_db
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_login
        tenant: development_tn
        contract: app_to_db_con
        subject: mongodb
        filter: "{{ item }}"
        log: log
        state: present
        output_path: dryrun_data.json
      loop:
        - mongodb

    # Filters
    - name: Create HTTP Filter
      cisco.aci.aci_filter:
        <<: *aci_login
        tenant: development_tn
        filter: http
        state: present
        output_path: dryrun_data.json

    - name: Create HTTP Filter Entry
      cisco.aci.aci_filter_entry:
        <<: *aci_login
        tenant: development_tn
        filter: http
        entry: http
        ether_type: ip
        ip_protocol: tcp
        dst_port: 80
        state: present
        output_path: dryrun_data.json

    - name: Create HTTPS Filter
      cisco.aci.aci_filter:
        <<: *aci_login
        tenant: development_tn
        filter: https
        state: present
        output_path: dryrun_data.json

    - name: Create HTTPS Filter Entry
      cisco.aci.aci_filter_entry:
        <<: *aci_login
        tenant: development_tn
        filter: https
        entry: https
        ether_type: ip
        ip_protocol: tcp
        dst_port: 443
        state: present
        output_path: dryrun_data.json

    - name: Create mongodb Filter
      cisco.aci.aci_filter:
        <<: *aci_login
        tenant: development_tn
        filter: mongodb
        state: present
        output_path: dryrun_data.json

    - name: Create HTTPS Filter Entry
      cisco.aci.aci_filter_entry:
        <<: *aci_login
        tenant: development_tn
        filter: mongodb
        entry: mongodb
        ether_type: ip
        ip_protocol: tcp
        dst_port: 27017
        state: present
        output_path: dryrun_data.json

    # Apply contracts

    - name: Add contracts for app demo
      cisco.aci.aci_epg_to_contract:
        <<: *aci_login
        tenant: development_tn
        ap: app_demo_ap
        epg: "{{ item.epg }}"
        contract: "{{ item.contract }}"
        contract_type: "{{ item.type }}"
        state: present
        output_path: dryrun_data.json
      loop:
        - {
            epg: "web_epg",
            contract: "shared_core_l3out_con",
            type: "consumer",
          }
        - {
            epg: "web_epg",
            contract: "shared_core_l3out_con",
            type: "provider",
          }
        - { epg: "web_epg", contract: "web_to_app_con", type: "consumer" }
        - { epg: "app_epg", contract: "web_to_app_con", type: "provider" }
        - { epg: "app_epg", contract: "app_to_db_con", type: "consumer" }
        - { epg: "db_epg", contract: "app_to_db_con", type: "provider" }
